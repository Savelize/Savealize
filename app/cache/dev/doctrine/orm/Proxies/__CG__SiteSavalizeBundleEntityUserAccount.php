<?php

namespace Proxies\__CG__\Site\SavalizeBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class UserAccount extends \Site\SavalizeBundle\Entity\UserAccount implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setFname($fname)
    {
        $this->__load();
        return parent::setFname($fname);
    }

    public function getFname()
    {
        $this->__load();
        return parent::getFname();
    }

    public function setLname($lname)
    {
        $this->__load();
        return parent::setLname($lname);
    }

    public function getLname()
    {
        $this->__load();
        return parent::getLname();
    }

    public function setUsername($username)
    {
        $this->__load();
        return parent::setUsername($username);
    }

    public function getUsername()
    {
        $this->__load();
        return parent::getUsername();
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function setCountry($country)
    {
        $this->__load();
        return parent::setCountry($country);
    }

    public function getCountry()
    {
        $this->__load();
        return parent::getCountry();
    }

    public function setCity($city)
    {
        $this->__load();
        return parent::setCity($city);
    }

    public function getCity()
    {
        $this->__load();
        return parent::getCity();
    }

    public function setRegion($region)
    {
        $this->__load();
        return parent::setRegion($region);
    }

    public function getRegion()
    {
        $this->__load();
        return parent::getRegion();
    }

    public function setAge($age)
    {
        $this->__load();
        return parent::setAge($age);
    }

    public function getAge()
    {
        $this->__load();
        return parent::getAge();
    }

    public function setMartalStatus($martalStatus)
    {
        $this->__load();
        return parent::setMartalStatus($martalStatus);
    }

    public function getMartalStatus()
    {
        $this->__load();
        return parent::getMartalStatus();
    }

    public function setCar($car)
    {
        $this->__load();
        return parent::setCar($car);
    }

    public function getCar()
    {
        $this->__load();
        return parent::getCar();
    }

    public function setSalary($salary)
    {
        $this->__load();
        return parent::setSalary($salary);
    }

    public function getSalary()
    {
        $this->__load();
        return parent::getSalary();
    }

    public function setCreatedAt($createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setUpdatedAt($updatedAt)
    {
        $this->__load();
        return parent::setUpdatedAt($updatedAt);
    }

    public function getUpdatedAt()
    {
        $this->__load();
        return parent::getUpdatedAt();
    }

    public function setLinkedTo(\Site\SavalizeBundle\Entity\UserAccount $linkedTo = NULL)
    {
        $this->__load();
        return parent::setLinkedTo($linkedTo);
    }

    public function getLinkedTo()
    {
        $this->__load();
        return parent::getLinkedTo();
    }

    public function addHistory(\Site\SavalizeBundle\Entity\History $history)
    {
        $this->__load();
        return parent::addHistory($history);
    }

    public function removeHistory(\Site\SavalizeBundle\Entity\History $history)
    {
        $this->__load();
        return parent::removeHistory($history);
    }

    public function getHistory()
    {
        $this->__load();
        return parent::getHistory();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'fname', 'lname', 'username', 'password', 'email', 'country', 'city', 'region', 'age', 'martalStatus', 'car', 'salary', 'createdAt', 'updatedAt', 'linkedTo', 'history');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}